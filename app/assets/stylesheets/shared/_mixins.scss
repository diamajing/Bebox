// Sass Mixin 
// Named Breakpoints are phone, tablet-portrait, tablet-landscape-desktop, large-desktop, non-retina, retina
@mixin respond-to($media) {
    /* Landscape phones and down */
    @if $media == phone {
        @media (max-width: 480px) { @content; }
    }
    /* Landscape phone to portrait tablet */
    @else if $media == tablet-portrait {
        @media (min-width: 481px) and (max-width: 767px) {@content; }
    }
    /* Portrait tablet to landscape and desktop */
    @else if $media == tablet-landscape-desktop {
        @media (min-width: 768px) and (max-width: 1024px) { @content; }
    }
    /* Portrait tablet to landscape and desktop */
    @else if $media == desktop {
        @media (min-width: 1025px) and (max-width: 1499px) { @content; }
    }
    /* Large desktop */
    @else if $media == large-desktop {
        @media (min-width: 1500px) { @content; }
    }
    // Non-Retina
    @else if $media == non-retina {
        @media screen and (-webkit-max-device-pixel-ratio: 1) { @content; }
    }
    // Retina Only
    @else if $media == retina {
        @media screen and (-webkit-min-device-pixel-ratio: 2) { @content; }
    }
    @else if $media == xs {
        @media (max-width: 767px) { @content; }
    }
    /* Landscape phone to portrait tablet */
    @else if $media == sm {
        @media (min-width: 768px) and (max-width: 991px) {@content; }
    }
    /* Portrait tablet to landscape and desktop */
    @else if $media == md {
        @media (min-width: 992px) and (max-width: 1199px) { @content; }
    }
    /* desktop and large desktop */
    @else if $media == lg {
        @media (min-width: 1200px) and (max-width: 1439px) { @content; }
    }
     /* desktop and large desktop */
    @else if $media == xl {
        @media (min-width: 1439px) and (max-width: 2939px) { @content; }
    }
    // Specific max width
    @else {
        @media only screen and (max-width: #{$media}px) { @content; }
    }
    // Specific max width
    @else {
        @media only screen and (max-width: #{$media}px) { @content; }
    }
}

@mixin respondto($media...) {
    @each $mediatype in $media {
        @include respond-to($mediatype) {@content}
    }
}

//Bootstrap text align for various sizes
.text-xs-left { text-align: left; }
.text-xs-right { text-align: right; }
.text-xs-center { text-align: center; }
.text-xs-justify { text-align: justify; }

@media (min-width: $screen-sm-min) {
    .text-sm-left { text-align: left; }
    .text-sm-right { text-align: right; }
    .text-sm-center { text-align: center; }
    .text-sm-justify { text-align: justify; }
}

@media (min-width: $screen-md-min) {
    .text-md-left { text-align: left; }
    .text-md-right { text-align: right; }
    .text-md-center { text-align: center; }
    .text-md-justify { text-align: justify; }
}

@media (min-width: $screen-lg-min) {
   .text-lg-left { text-align: left; }
   .text-lg-right { text-align: right; }
   .text-lg-center { text-align: center; }
   .text-lg-justify { text-align: justify; }
}
